[{"name": "app.py", "content": "\nfrom shiny import reactive, render\nfrom shiny.express import input, ui\nfrom shinyswatch import theme\nfrom shinywidgets import render_plotly\nimport random\nfrom datetime import datetime\nfrom collections import deque\nimport pandas as pd\nimport plotly.express as px\nfrom scipy import stats\nfrom faicons import icon_svg\n\n# --------------------------------------------\n# Shiny EXPRESS VERSION\n# --------------------------------------------\n\n# --------------------------------------------\n# First, set a constant UPDATE INTERVAL for all live data\n# Constants are usually defined in uppercase letters\n# Use a type hint to make it clear that it's an integer (: int)\n# --------------------------------------------\n\nUPDATE_INTERVAL_SECS: int = 5\n\n# --------------------------------------------\n# Initialize a REACTIVE VALUE with a common data structure\n# The reactive value is used to store state (information)\n# Used by all the display components that show this live data.\n# This reactive value is a wrapper around a DEQUE of readings\n# --------------------------------------------\n\nDEQUE_SIZE: int = 8\nreactive_value_wrapper = reactive.value(deque(maxlen=DEQUE_SIZE))\n\n\nui.page_opts(title=\"Kamalini's PyShiny Live Data\", fillable=True)\n\ntheme.cosmo()\n\nwith ui.sidebar(open=\"open\"):\n\n    ui.h2(\"Maryville Temperature\", class_=\"text-center\")\n    ui.p(\n        \"A demonstration of real-time temperature readings in Maryville, Missouri.\",\n        class_=\"text-center\",\n    )\n    ui.hr()\n    ui.input_numeric(\"temp_low\", \"Lowest Temperature\", 32)\n    ui.input_numeric(\"temp_high\", \"Highest Temperature\", 70)\n    ui.h6(\"Links:\")\n    ui.a(\n        \"GitHub Source\",\n        href=\"https://github.com/S573647/cintel-05-cintel\",\n        target=\"_blank\",\n    )\n    ui.a(\n        \"GitHub App\",\n        href=\"https://github.com/S573647/cintel-05-cintel\",\n        target=\"_blank\",\n    )\n    ui.a(\"PyShiny\", href=\"https://shiny.posit.co/py/\", target=\"_blank\")\n    ui.a(\n        \"PyShiny Express\",\n        href=\"https://shiny.posit.co/blog/posts/shiny-express/\",\n        target=\"_blank\",\n    )\n\n\n@reactive.calc()\ndef reactive_calc_combined():\n    # Invalidate this calculation every UPDATE_INTERVAL_SECS to trigger updates\n    reactive.invalidate_later(UPDATE_INTERVAL_SECS)\n\n    # Data generation logi\n    temp = round(random.uniform(input.temp_low(), input.temp_high()), 1)\n    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    new_dictionary_entry = {\"temp\":temp, \"timestamp\":timestamp}\n\n    # get the deque and append the new entry\n    reactive_value_wrapper.get().append(new_dictionary_entry)\n\n    # Get a snapshot of the current deque for any further processing\n    deque_snapshot = reactive_value_wrapper.get()\n\n    # For Display: Convert deque to DataFrame for display\n    df = pd.DataFrame(deque_snapshot)\n\n    # For Display: Get the latest dictionary entry\n    latest_dictionary_entry = new_dictionary_entry\n\n    # Return a tuple with everything we need\n    # Every time we call this function, we'll get all these values\n    return deque_snapshot, df, latest_dictionary_entry\n\n\n# In Shiny Express, everything not in the sidebar is in the main panel\n\nwith ui.layout_columns():\n    with ui.value_box(\n        showcase=icon_svg(\"sun\"),\n        theme=\"bg-gradient-blue-purple\",\n    ):\n\n        \"Current Temperature\"\n\n        @render.text\n        def display_temp():\n            \"\"\"Get the latest reading and return a temperature string\"\"\"\n            deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n            return f\"{latest_dictionary_entry['temp']} C\"\n\n        \"Mostly Sunny\"\n\n  \n    with ui.card(full_screen=True, style=\"background-color: lavender\"):\n        ui.card_header(\"Current Date and Time\")\n\n        @render.text\n        def display_time():\n            \"\"\"Get the latest reading and return a timestamp string\"\"\"\n            deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n            return f\"{latest_dictionary_entry['timestamp']}\"\n\n\nwith ui.layout_columns(col_widths=(4, 8)): # Making each card a different width\n    with ui.card(full_screen=True, style=\"background-color: lavender\"):\n        ui.card_header(\"Most Recent Readings\")\n\n        @render.data_frame\n        def display_df():\n            \"\"\"Get the latest reading and return a dataframe with current readings\"\"\"\n            deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n            pd.set_option('display.width', None)        # Use maximum width\n            return render.DataGrid( df,width=\"100%\")\n\n    with ui.card(full_screen=True, style=\"background-color: lavender\"):\n        ui.card_header(\"Chart with Current Trend\")\n\n        @render_plotly\n        def display_plot():\n            # Fetch from the reactive calc function\n            deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n\n            # Ensure the DataFrame is not empty before plotting\n            if not df.empty:\n                # Convert the 'timestamp' column to datetime for better plotting\n                df[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"])\n\n                # Create scatter plot for readings\n                # pass in the df, the name of the x column, the name of the y column,\n                # and more\n            \n                fig = px.scatter(df,\n                x=\"timestamp\",\n                y=\"temp\",\n                title=\"Temperature Readings with Regression Line\",\n                labels={\"temp\": \"Temperature (\u00c2\u00b0F)\", \"timestamp\": \"Time\"},\n                color_discrete_sequence=[\"blue\"] )\n                \n                # Linear regression - we need to get a list of the\n                # Independent variable x values (time) and the\n                # Dependent variable y values (temp)\n                # then, it's pretty easy using scipy.stats.linregress()\n\n                # For x let's generate a sequence of integers from 0 to len(df)\n                sequence = range(len(df))\n                x_vals = list(sequence)\n                y_vals = df[\"temp\"]\n\n                slope, intercept, r_value, p_value, std_err = stats.linregress(x_vals, y_vals)\n                df['best_fit_line'] = [slope * x + intercept for x in x_vals]\n\n                # Add the regression line to the figure\n                fig.add_scatter(x=df[\"timestamp\"], y=df['best_fit_line'], mode='lines', name='Regression Line')\n\n                # Update layout as needed to customize further\n                fig.update_layout(xaxis_title=\"Time\",yaxis_title=\"Temperature (\u00c2\u00b0F)\")\n\n            return fig", "type": "text"}]